
; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
OutputBaseFilename=VidOn_Server_2028_Stable
AppId=VidOn Server 2
AppName={cm:MyAppName}
AppVerName={cm:MyAppName}
AppVersion=2.0.2.8 Stable
VersionInfoVersion=2.0.2.8
AppPublisher=VidOn.me Inc.
AppPublisherURL=http://www.vidon.me/
AppSupportURL=http://www.vidon.me/
AppUpdatesURL=http://www.vidon.me/
DefaultDirName={pf}\VidOn Server 2
DirExistsWarning=false
DefaultGroupName={cm:MyAppName}
DisableReadyPage=true
; DisableProgramGroupPage=true
AllowNoIcons=true
DisableStartupPrompt=true
; AlwaysRestart=true
RestartIfNeededByRun=false
PrivilegesRequired=admin
; AlwaysCreateUninstallIcon=yes
;LicenseFile=vidonme\License.txt;InfoAfterFile=vidonme\Readme.txt
; uncomment the following line if you want your installation to run on NT 3.51 too.
; MinVersion=4,3.51        
                          
SetupIconFile=vidonme\Install.ico
WizardImageFile=vidonme\WizardImageFile.bmp
WizardSmallImageFile=vidonme\WizardSmallImageFile.bmp
WizardImageStretch=yes

Compression=lzma2/ultra64
InternalCompressLevel=ultra64
SolidCompression=true

UninstallDisplayIcon={app}\vidontray.exe

LanguageDetectionMethod=uilanguage
;Tells the installer to only display a select language dialog if the an exact match wasn't found
ShowUndisplayableLanguages=yes      

;SignTool=signtoolcmd sign /v /a /n "VidOn.me Inc." /t http://timestamp.verisign.com/scripts/timestamp.dll $f

;SignedUninstaller=yes

[Languages]
;Inno Setup's Native Language
Name: English; MessagesFile: compiler:Languages\English.isl

;Localizations:
Name: Arabic; MessagesFile: compiler:Languages\Arabic.isl
Name: Bulgarian; MessagesFile: compiler:Languages\Bulgarian.isl
Name: Catalan; MessagesFile: compiler:Languages\Catalan.isl
Name: Chinese_Simplified; MessagesFile: compiler:Languages\Chinese_Simplified.isl;
Name: Chinese_Traditional; MessagesFile: compiler:Languages\Chinese_Traditional.isl
Name: Czech; MessagesFile: compiler:Languages\Czech.isl
Name: Danish; MessagesFile: compiler:Languages\Danish.isl
Name: Dutch; MessagesFile: compiler:Languages\Dutch.isl
Name: French; MessagesFile: compiler:Languages\French.isl
Name: German; MessagesFile: compiler:Languages\German.isl
Name: Greek; MessagesFile: compiler:Languages\Greek.isl
Name: Hungarian; MessagesFile: compiler:Languages\Hungarian.isl
Name: Italian; MessagesFile: compiler:Languages\Italian.isl; 
Name: Japanese; MessagesFile: compiler:Languages\Japanese.isl
Name: Korean; MessagesFile: compiler:Languages\Korean.isl
Name: Norwegian; MessagesFile: compiler:Languages\Norwegian.isl
Name: Polish; MessagesFile: compiler:Languages\Polish.isl
Name: Portuguese_Portugal; MessagesFile: compiler:Languages\Portuguese.isl
Name: Portuguese_Brazil; MessagesFile: compiler:Languages\Brazilian_Portuguese.isl
Name: Russian; MessagesFile: compiler:Languages\Russian.isl
Name: Slovak; MessagesFile: compiler:Languages\Slovak.isl
Name: Spanish; MessagesFile: compiler:Languages\Spanish.isl
Name: Swedish; MessagesFile: compiler:Languages\Swedish.isl

[CustomMessages]
English.MyAppName = VidOn Server
Arabic.MyAppName = VidOn Server
Bulgarian.MyAppName = VidOn Server
Catalan.MyAppName = VidOn Server


Chinese_Simplified.MyAppName=Íþ¶¯·þÎñÆ÷
Chinese_Traditional.MyAppName = VidOn Server
Czech.MyAppName = VidOn Server
Danish.MyAppName = VidOn Server
Dutch.MyAppName = VidOn Server

French.MyAppName = VidOn Server
German.MyAppName = VidOn Server
Greek.MyAppName = VidOn Server
Hungarian.MyAppName = VidOn Server
Italian.MyAppName = VidOn Server

Japanese.MyAppName = VidOn Server
Korean.MyAppName = VidOn Server
Norwegian.MyAppName = VidOn Server
Polish.MyAppName = VidOn Server
Portuguese_Portugal.MyAppName = VidOn Server

Portuguese_Brazil.MyAppName = VidOn Server
Russian.MyAppName = VidOn Server
Slovak.MyAppName = VidOn Server
Spanish.MyAppName = VidOn Server
Swedish.MyAppName = VidOn Server

English.LaunchProgram=Launch VidOn Server


[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}
;Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}

[Components]
;Name: "Bonjoursdk"; Description: "Apple Bonjour"; Types: full; 
;Name: "DXSetup"; Description: "Microsoft DirectX";  Types: full;  
[Files]
;Source: VDM_Server2\*; Excludes: "\mysql\*"; DestDir: {app}; Flags: ignoreversion  recursesubdirs restartreplace
Source: VDM_Server2\*; Excludes: "\webapp\.git\*,\transcode\*";DestDir: {app}; Flags: ignoreversion  recursesubdirs restartreplace
Source: mysql\mysql\bin\*;  Excludes:MySQLInstanceConfig.exe; DestDir: {app}\mysql\bin; Flags: ignoreversion  recursesubdirs restartreplace
Source: mysql\mysql\lib\*;  DestDir: {app}\mysql\lib; Flags: ignoreversion  recursesubdirs restartreplace
Source: mysql\mysql\share\*;  DestDir: {app}\mysql\share; Flags: ignoreversion  recursesubdirs restartreplace
Source: mysql\mysql\mysqlconfigmaker.exe;  DestDir: {app}\mysql; Flags: ignoreversion  recursesubdirs restartreplace
Source: mysql\mysql\data\*; DestDir: {commondocs}\VMS2\mysql\data; Flags: ignoreversion  recursesubdirs restartreplace
Source: VDM_Server2\system\dnssd.dll; DestDir: {app}; Flags: ignoreversion  recursesubdirs restartreplace
Source: ffmpeg\*; DestDir: {app}; Flags: ignoreversion  recursesubdirs restartreplace

[INI]
;Filename: {app}\DVDFab.url; Section: InternetShortcut; Key: URL; String: http://www.vidon.me/

[Icons]
Name: {group}\VidOn Server 2; Filename: {app}\VidOnTray.exe
Name: {group}\VidOn Official Website; Filename: http://www.vidon.me; IconFilename: {app}\VidOnTray.exe
Name: {group}\Uninstall VidOn Server 2; Filename: {uninstallexe}
;Desktop Icon
Name: {commondesktop}\{cm:MyAppName}; Filename: {app}\VidOnTray.exe; MinVersion: 4,4; Tasks: desktopicon


[Registry]
Root: HKCU; Subkey: Software\Microsoft\Windows\CurrentVersion\Run;  ValueName: "VidOnTray"; Flags: uninsdeletevalue
Root: HKLM; Subkey: Software\Microsoft\Windows\CurrentVersion\Run;  ValueName: "VidOnTray"; Flags: uninsdeletevalue

[Run]
;Filename: {commondocs}\mysql\mysqld.bat; Flags: runhidden;
;Filename: {app}\mysql\mysql_init_schema.bat; Flags: runhidden;
;add from wangxingyuan

;delete from wangxingyuan
;Filename: {app}\vidonservice.exe; Parameters: "/uninstall";
;Filename: {app}\vidonservice.exe; Parameters: "/install"; Filename: {app}\VidOnTray.exe; Description: {cm:LaunchProgram, {cm:MyAppName}}; Parameters: "/openurl"; Flags: postinstall nowait runasoriginaluser   

;Filename: {app}\VidOn.me Media Server.exe; Description: {cm:LaunchProgram,VidOn.me Media Server}; Parameters: "/openurl";   Flags: nowait postinstall;

[UninstallRun]
;delete from wangxingyuan
;Filename: {app}\vidonservice.exe; Parameters: "/uninstall"

[UninstallDelete]
Type: filesandordirs; Name: {app}; 

[Code]
var
  bNeedRestart: Boolean;

///////////////////////////////////////////////////////////////////////////
// helper functions
function IsX86: Boolean;
begin
  Result := not IsWin64;
end;

function IsX64: Boolean;
begin
  Result := IsWin64 and (ProcessorArchitecture = paX64);
end;

//function IsInstallVSO: Boolean;
//begin
//  Result := IsTaskSelected('InstallVSO');
//end;

function ExitApp() : Boolean;
var
  hWndApp: HWND;
  i: integer;
  ErrorCode: integer;
begin
   //ShellExec('open', 'sc', 'delete vidonservice', '', SW_HIDE, ewNoWait, ErrorCode);
   //ShellExec('open', 'net', 'stop vidonservice', '', SW_HIDE, ewNoWait, ErrorCode);
   //ShellExec('open', 'taskkill.exe', '/f /im vidonservice.exe', '', SW_HIDE, ewNoWait, ErrorCode);
   
   ShellExec('open', 'taskkill.exe', '/f /im VidOnTray.exe', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
   ShellExec('open', 'taskkill.exe', '/f /im VidOnServer.exe', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
   ShellExec('open', 'taskkill.exe', '/f /im VidOnMediaTranscoder.exe', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
   ShellExec('open', 'taskkill.exe', '/f /im VidOnMediaAnalysis.exe', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
   //ShellExec('open', 'net', 'stop VidOnMysqld', '', SW_HIDE, ewNoWait, ErrorCode);
   ShellExec('open', 'taskkill.exe', '/f /im VidOnMysqld.exe', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
   //ShellExec('open', 'sc', 'delete VidOnMysqld', '', SW_HIDE, ewNoWait, ErrorCode);
end;



function IsWindowsXP: Boolean;
var
  Version: TWindowsVersion;
begin
  Result := FALSE;

  GetWindowsVersionEx(Version);

  if Version.NTPlatform and (Version.Major = 5) then
    Result := TRUE;
end;

function IsWindowsVista: Boolean;
var
  Version: TWindowsVersion;
begin
  Result := FALSE;

  GetWindowsVersionEx(Version);

  if Version.NTPlatform and (Version.Major = 6) then
    Result := TRUE;
end;



function IsWindows9x: Boolean;
var
  Version: TWindowsVersion;
begin
  Result := FALSE;

  GetWindowsVersionEx(Version);

  if not Version.NTPlatform then
    Result := TRUE;
end;


//copy files from source dir to destination (recursively)
function DirCopy(SourceDir, DestDir:String; const recurisive: Boolean):Boolean;
var
  FindRec: TFindRec;
begin
  SourceDir := AddBackslash(SourceDir);
  DestDir := AddBackslash(DestDir);
  if not DirExists(DestDir) then CreateDir(DestDir);
  if FindFirst(SourceDir + '*', FindRec) then
  begin
  try
  repeat
  if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then          //not directory
  begin
    FileCopy(SourceDir + FindRec.Name,DestDir + FindRec.Name, False);
  end
  else if (FindRec.Name <> '.') and (FindRec.Name <> '..') then        //is directory
  begin 
    CreateDir(DestDir + FindRec.Name);
    if recurisive then //recurisively
    DirCopy(SourceDir + FindRec.Name, DestDir + FindRec.Name, True);
  end;
  until not FindNext(FindRec);
  finally
  FindClose(FindRec);
  end;
  end;
  Result := True;
end;


//function GetVidOnmeMediaServerPath():Boolean;
//var
//  VidOnmeMediaServerPath: String;
//  ErrorCode : integer;
//begin
//  if IsWindowsXP then
//  begin
//    if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VidOn.me Media Server_is1','UninstallString', VidOnmeMediaServerPath) then
//    begin
//      ShellExec('',VidOnmeMediaServerPath,'/VERYSILENT','', SW_HIDE, ewNoWait, ErrorCode);
//    end
//  end

//  else if IsWindowsVista then
//  begin
//    if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\VidOn.me Media Server_is1','UninstallString', VidOnmeMediaServerPath) then
//    begin
//      ShellExec('',VidOnmeMediaServerPath,'/VERYSILENT','', SW_HIDE, ewNoWait, ErrorCode);
//    end
//  end
//end;



function Uninstall_VidOnServer1():Boolean;
var
  VidOnServerPath: String;
  ErrorCode : integer;
begin
  //ShellExec('open', 'taskkill.exe', '/f /im VMS.exe', '', SW_HIDE, ewNoWait, ErrorCode);
  //ShellExec('open', 'net', 'stop "VMS Service"', '', SW_HIDE, ewNoWait, ErrorCode);
  //ShellExec('open', 'taskkill.exe', '/f /im "VidOn Server.exe"', '', SW_HIDE, ewNoWait, ErrorCode);
  //ShellExec('open', 'taskkill.exe', '/f /im "VidOn.me Media Server.exe"', '', SW_HIDE, ewNoWait, ErrorCode);

  if DirExists('C:\Users\Public\Documents\VidOn Server') then
    begin
      DelTree('C:\Users\Public\Documents\VidOn Server', True, True, True);
      Sleep(800);
    end;
  
  if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VidOn Server_is1','UninstallString', VidOnServerPath) then
  begin
    //MsgBox(VidOnServerPath, mbConfirmation, MB_OK)
    ShellExec('',VidOnServerPath,'/VERYSILENT','', SW_HIDE, ewNoWait, ErrorCode);
  end
end;


function NotSupportCurrentOperation():Boolean;
begin
  if not IsWindowsVista then
  begin
    //MsgBox('Sorry, but our software does not support XP!', mbConfirmation, MB_OK) 
    MsgBox(ExpandConstant('{cm:NotSupportOperation}'), mbConfirmation, MB_OK)
    abort;
  end
end;


function Uninstall_VidOnServer20():Boolean;
var
  VidOnServerPath: String;
  ErrorCode : integer;
begin

  if DirExists('C:\Users\Public\Documents\VMS2') then
    begin
      DelTree('C:\Users\Public\Documents\VMS2', True, True, True);
      Sleep(800);
    end;
  
  if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VidOn Server 2_is1','UninstallString', VidOnServerPath) then
  begin
    ShellExec('',VidOnServerPath,'/VERYSILENT','', SW_HIDE, ewNoWait, ErrorCode);
    Sleep(1000);
  end
end;


function GetVDMServerVersion(): String;
var
  returncode: integer;
  appversion: string;
  sKey, sValueName: string;
begin
    sKey := 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VidOn Server 2_is1';
    sValueName := 'DisplayVersion'; 
    if RegQueryStringValue(HKEY_LOCAL_MACHINE, sKey, sValueName, appversion) then
    begin
      if appversion < '2.1' then
      begin
        if MsgBox(ExpandConstant('{cm:UninstallBeforeInstall}'), mbConfirmation, MB_YESNO) = IDYES then
          begin
            Uninstall_VidOnServer20();
          end
        else begin
          abort;
        end;
      end;
    end;
end;



function InitializeSetup(): Boolean;
var
//  filename: string;
  //dirname: string;
  i: integer;
  ErrorCode: integer;
begin
  NotSupportCurrentOperation();
  ExitApp()
  GetVDMServerVersion();
	bNeedRestart := FALSE;
	Result := True;

  //ShellExec('open', 'taskkill.exe', '/f /im VMS.exe', '', SW_HIDE, ewNoWait, ErrorCode);
  //ShellExec('open', 'net', 'stop "VMS Service"', '', SW_HIDE, ewNoWait, ErrorCode);
  //ShellExec('open', 'taskkill.exe', '/f /im "VidOn Server.exe"', '', SW_HIDE, ewNoWait, ErrorCode);
  //ShellExec('open', 'taskkill.exe', '/f /im "VidOn.me Media Server.exe"', '', SW_HIDE, ewNoWait, ErrorCode);

  
  //MsgBox('222222222222222222222222', mbConfirmation, MB_OK)
  if DirExists('C:\Users\Public\Documents\VidOn Server') then
    begin
      //MsgBox('111111111111111111111111', mbConfirmation, MB_OK)
      DelTree('C:\Users\Public\Documents\VidOn Server', True, True, True);
      Sleep(800);
    end;
  

  Uninstall_VidOnServer1();

  //begin
    ////copy user data to new userdata folder, delete old userdata folder
    //dirname := ExpandConstant('{commondocs}\')+'VidOn.me Media Server123'
    //if DirExists(dirname) then
    //begin
    //  Sleep(2000);
    //  DirCopy(dirname, ExpandConstant('{commondocs}\')+'VidOn Server 2', True);
    //  DelTree(dirname, True, True, True);
    //end;    
    //if IsWindowsXP then
    //  begin      
    //  if  RegKeyExists(HKEY_LOCAL_MACHINE,'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VidOn.me Media Server_is1') then
    //  begin
    //  GetVidOnmeMediaServerPath();
    //  end
    //end
    //else if IsWindowsVista then
    //begin      
    //  if  RegKeyExists(HKEY_LOCAL_MACHINE,'SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\VidOn.me Media Server_is1') then
    //  begin
    //  GetVidOnmeMediaServerPath();
    //  end
    //end
  //end;
end;


function NeedRestart(): Boolean;
begin
  Result := bNeedRestart;

  if IsWindows9x then
    Result := TRUE;
end;    

procedure CurPageChanged(CurPageID: Integer);
var
  appexe: string;
  VenBegin, AffBegin: string;
  srcexe: string;
  StrPos1, StrPos2: integer;
  Vendor, AffId: string;
  sKey,
  sValueName,
  sValueData: string;
  i: integer;
  sLowercase, sUppercase, sCK, sAffId: string;
  iSubstringPos, iResString, iPosNumStr: integer;
begin
  if CurPageID = wpInstalling then
  begin

    for i := 1 to 6 do
    begin
    
      // add app and options to DEP exception list
      if i = 1 then
	    begin
        appexe := ExpandConstant('{app}') + '\VidOnServer.exe';
      end
      else if i = 2 then
      begin
        appexe := ExpandConstant('{app}') + '\VidOnMediaTranscoder.exe';
      end
      else if i = 3 then
      begin
        appexe := ExpandConstant('{app}') + '\VidOnMediaAnalysis.exe';
      end
	    else if i = 4 then
      begin
        appexe := ExpandConstant('{app}') + '\VidOnTray.exe';
      end
      else if i = 5 then
      begin
        appexe := ExpandConstant('{app}') + '\VidOnCheck.exe';
      end
      else if i = 6 then
      begin
        appexe := ExpandConstant('{app}') + '\mysql\bin\VidOnMysqld.exe';
      end;

      if IsWindowsXP then
      begin
        if not RegValueExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers', appexe) then
        begin
          RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers', appexe, 'DisableNXShowUI');
          RegWriteDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\NoExecuteState', 'LastNoExecuteRadioButtonState', 13013);
          bNeedRestart := TRUE;
        end
      end
      else if IsWindowsVista then
      begin
        if not RegValueExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers', appexe) then
        begin
          RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers', appexe, 'DisableNXShowUI');
          RegWriteDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\NoExecuteState', 'LastNoExecuteRadioButtonState', 14013);
          bNeedRestart := TRUE;
        end
      end
    end;    
   ExitApp();
  end;   
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var 
  vms2_path:string;
begin
  ExitApp();
  vms2_path := ExpandConstant('{commondocs}')+ '\VMS2' 
  if (CurUninstallStep = usPostUninstall) and DirExists(vms2_path) then
    begin
      DelTree(vms2_path, True, True, True);
    end;
  
  if (CurUninstallStep = usUninstall) and DirExists('C:\Users\Public\Documents\VidOn Server 2') then
  begin      
    if MsgBox(ExpandConstant('{cm:IfRemovePersonalData}'), mbConfirmation, MB_YESNO) = IDYES then
    begin
        DelTree('C:\Users\Public\Documents\VidOn Server 2', True, True, True);
    end;
  end;
end;





procedure CurStepChanged(CurStep: TSetupStep);
var       
  mysqlconfigmaker,mysql_filename,myini_filename: string;
  ErrorCode: integer;  
  filename, dirname: string; 
begin       
  if CurStep = ssPostInstall then      
  begin  
    //run mysql
	  mysqlconfigmaker := ExpandConstant('{app}')+'\mysql\mysqlconfigmaker.exe';
    mysql_filename := ExpandConstant('{app}')+'\mysql\bin\VidOnMysqld.exe';   
    myini_filename := ExpandConstant('{commondocs}')+'\VMS2\mysql\my.ini';     
    if FileExists(mysql_filename) then
    begin
	   ShellExec('open', mysqlconfigmaker, myini_filename+' "'+ExpandConstant('{app}')+'\mysql" '+ExpandConstant('{commondocs}')+'\VMS2\mysql', '',SW_HIDE, ewNoWait, ErrorCode);
	   //ShellExec('open', mysql_filename, ' /i --install vidon_mysql --defaults-file='+myini_filename, '',SW_HIDE, ewNoWait, ErrorCode);
	   //ShellExec('open', 'net', 'start vidon_mysql', ' /i --defaults-file='+myini_filename + ' --user=root', SW_HIDE, ewNoWait, ErrorCode);
    end;
    
   
    //delete desktop icon
    filename := ExpandConstant('{commondesktop}') + '\VidOn.me Media Server.lnk';
    if FileExists(filename) then
    begin
      DeleteFile(filename)
    end;


    filename := ExpandConstant('{app}') + '\mysql\bin\MySQLInstanceConfig.exe';
    if FileExists(filename) then
    begin
      DeleteFile(filename)
    end;
    filename := ExpandConstant('{app}') + '\vidonservice.exe';
    if FileExists(filename) then
    begin
      DeleteFile(filename)
    end;

    dirname := ExpandConstant('{app}') + '\web';
    if DirExists(dirname) then
    begin
      DelTree(dirname, True, True, True);
    end;

    dirname := ExpandConstant('{app}') + '\transcode';
    if DirExists(dirname) then
    begin
      DelTree(dirname, True, True, True);
    end;

    //filename := ExpandConstant('{app}') + '\vidonserver.exe';
    //if FileExists(filename) then
    //begin
    //  DeleteFile(filename)
    //end;

    filename := ExpandConstant('{app}') + '\MediaTranscoder.exe';
    if FileExists(filename) then
    begin
      DeleteFile(filename)
    end;

    filename := ExpandConstant('{app}') + '\MediaAnalysis.exe';
    if FileExists(filename) then
    begin
      DeleteFile(filename)
    end;

    //filename := ExpandConstant('{app}') + '\vidontray.exe';
    //if FileExists(filename) then
    //begin
    //  DeleteFile(filename)
    //end;
    
    //dont delete VMSCheck.exe from wanglianwei
    //filename := ExpandConstant('{app}') + '\VMSCheck.exe';
    //if FileExists(filename) then
    //begin
    //  DeleteFile(filename)
    //end;

    filename := ExpandConstant('{app}') + '\mysql\bin\vidon_mysqld.exe';
    if FileExists(filename) then
    begin
      DeleteFile(filename)
    end;

    
  end;   

end;
